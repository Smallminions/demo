package com.mobile.dao.impl;import com.mobile.dao.DeviceDao;import com.mobile.model.Device;import com.mobile.util.DatabaseBean;import com.mobile.util.Pagination;import java.sql.*;import java.util.ArrayList;import java.util.List;public class DeviceDaoImpl implements DeviceDao {    Connection con = null;    CallableStatement sta = null;    ResultSet res = null;    String sql = null;    @Override    public List<Device> getAllDevice(String dname,Pagination pagination) {        List<Device> devices = new ArrayList<Device>();        try{            sql = "{call getDeviceCount(?,?)}";            con = DatabaseBean.getConnection();            sta = con.prepareCall(sql);            if(dname.equals("全部"))                sta.setString(1,null);            else                sta.setString(1,dname);            sta.registerOutParameter(2, Types.INTEGER);            res = sta.executeQuery();            int count = sta.getInt(2);            pagination.setCountSize(count);            //求指定显示的记录数            int perPage = pagination.getPageSize();            int start = (pagination.getPageNo()-1)*perPage;            sql = "{call getDevices(?,?,?)}";            sta = con.prepareCall(sql);            if(dname.equals("全部"))                sta.setString(1,null);            else                sta.setString(1,dname);            sta.setInt(2,start);            sta.setInt(3,pagination.getPageSize());            res = sta.executeQuery();            while (res.next()){                Device device = new Device();                device.setDid(res.getString(1));                device.setDname(res.getString(2));                device.setDplace(res.getString(3));                device.setDstatus(res.getString(4).equals("使用"));                devices.add(device);            }            return devices;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return null;    }    @Override    public Device getDevice(String did) {        try{        sql = "{call findDevice(?)}";        con = DatabaseBean.getConnection();        sta = con.prepareCall(sql);        sta.setString(1,did);        res = sta.executeQuery();        while (res.next()){            Device device = new Device();            device.setDid(res.getString(1));            device.setDname(res.getString(2));            device.setDplace(res.getString(3));            device.setDstatus(res.getString(4).equals("使用"));            return device;        }        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return null;    }    @Override    public String[] getDeviceKind() {        String[] kinds;        try{            sql = "{call getDeviceKind()}";            con = DatabaseBean.getConnection();            sta = con.prepareCall(sql);            res = sta.executeQuery();            res.last();            int s = res.getRow()+1;//获取结果集数量            res.beforeFirst();            kinds = new String[s];            kinds[0] = "全部";            int i =1;            while (res.next()) {                kinds[i] = res.getString(1);                i++;            }            return kinds;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return null;    }    @Override    public boolean findDevice(String did) {        try{            sql = "{call findDevice(?)}";            con = DatabaseBean.getConnection();            sta = con.prepareCall(sql);            sta.setString(1,did);            res = sta.executeQuery();           if (res.next())                return true;           else               return false;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean insertDevice(Device device) {        try {            con = DatabaseBean.getConnection();            sql = "{call insertDevice(?,?,?,?)}";            sta = con.prepareCall(sql);            sta.setString(1,device.getDid());            sta.setString(2,device.getDname());            sta.setString(3,device.getDplace());            sta.setString(4,device.isDstatus()?"使用":"未使用");            res = sta.executeQuery();            if(res.toString().endsWith("1"))                return true;            else                return false;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean updateDevice(Device device) {        try {            con = DatabaseBean.getConnection();            sql = "{call updateDevice(?,?,?,?)}";            sta = con.prepareCall(sql);            sta.setString(1,device.getDid());            sta.setString(2,device.getDname());            sta.setString(3,device.getDplace());            sta.setString(4,device.isDstatus()?"使用":"未使用");            res = sta.executeQuery();            return true;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean deleteDevice(String did) {        try{            con = DatabaseBean.getConnection();            sql = "{call deleteDevice(?)}";            sta = con.prepareCall(sql);            sta.setString(1,did);            res = sta.executeQuery();            if(res.toString().endsWith("1"))                return true;            else                return false;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }}