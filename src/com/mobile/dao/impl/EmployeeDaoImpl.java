package com.mobile.dao.impl;import com.mobile.dao.EmployeeDao;import com.mobile.model.Employee;import com.mobile.util.DatabaseBean;import com.mobile.util.Pagination;import java.sql.*;import java.util.ArrayList;import java.util.List;public class EmployeeDaoImpl implements EmployeeDao {    Connection con = null;    CallableStatement sta = null;    ResultSet res = null;    String sql = null;    @Override    public boolean employeeLogin(String id,String pwd) {        try {            con = DatabaseBean.getConnection();            sql = "{call getPwd(?,?)}";            sta = con.prepareCall(sql);            sta.setString(1,id);            sta.registerOutParameter(2,Types.VARCHAR);            res = sta.executeQuery();            if(sta.getString(2).equals(pwd)){                return true;            }        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public List<Employee> getAllEmployee(Pagination pagination) {        List<Employee> employees = new ArrayList<Employee>();        try {            sql = "{call getEmployeeCount(?)}";            con = DatabaseBean.getConnection();            sta = con.prepareCall(sql);            sta.registerOutParameter(1,Types.INTEGER);            res = sta.executeQuery();            int count = sta.getInt(1);            pagination.setCountSize(count);            //求指定显示的记录数            int perPage = pagination.getPageSize();            int start = (pagination.getPageNo()-1)*perPage;            sql = "{call getEmployees(?,?)}";            sta = con.prepareCall(sql);            sta.setInt(1,start);            sta.setInt(2,pagination.getPageSize());            res = sta.executeQuery();            while (res.next()){                Employee em = new Employee();                em.setEid(res.getString(1));                em.setEpwd(res.getString(2));                em.setEauthority(res.getString(3));                em.setEname(res.getString(4));                em.setEsex(res.getString(5));                em.setEnum(res.getString(6));                em.setEdept(res.getString(7));                em.setEduty(res.getString(8));                em.setEemail(res.getString(9));                em.setEtel(res.getString(10));                em.setEip(res.getString(11));                employees.add(em);            }        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return employees;    }    @Override    public Employee getEmployee(String eid) {        try {            sql = "{call findEmployee(?)}";            con = DatabaseBean.getConnection();            sta = con.prepareCall(sql);            sta.setString(1,eid);            res = sta.executeQuery();            while (res.next()){                Employee em = new Employee();                em.setEid(res.getString(1));                em.setEpwd(res.getString(2));                em.setEauthority(res.getString(3));                em.setEname(res.getString(4));                em.setEsex(res.getString(5));                em.setEnum(res.getString(6));                em.setEdept(res.getString(7));                em.setEduty(res.getString(8));                em.setEemail(res.getString(9));                em.setEtel(res.getString(10));                em.setEip(res.getString(11));                return em;            }        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return null;    }    @Override    public boolean findEmployee(String eid) {        try{            con = DatabaseBean.getConnection();            sql = "{call findEmployee(?)}";            sta = con.prepareCall(sql);            sta.setString(1,eid);            res = sta.executeQuery();            while (res.next())                return true;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean insertEmployee(Employee employee) {        try{            con = DatabaseBean.getConnection();            sql = "{call insertEmployee(?,?,?,?,?,?,?,?,?,?,?)}";            sta = con.prepareCall(sql);            sta.setString(1,employee.getEid());            sta.setString(2,employee.getEpwd());            sta.setString(3,employee.getEauthority());            sta.setString(4,employee.getEname());            sta.setString(5,employee.getEsex());            sta.setString(6,employee.getEnum());            sta.setString(7,employee.getEdept());            sta.setString(8,employee.getEduty());            sta.setString(9,employee.getEemail());            sta.setString(10,employee.getEtel());            sta.setString(11,employee.getEip());            res = sta.executeQuery();            return true;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean updateEmployee(Employee employee) {        try{            con = DatabaseBean.getConnection();            sql = "{call updateEmployee(?,?,?,?,?,?,?,?,?,?,?)}";            sta = con.prepareCall(sql);            sta.setString(1,employee.getEid());            sta.setString(2,employee.getEpwd());            sta.setString(3,employee.getEauthority());            sta.setString(4,employee.getEname());            sta.setString(5,employee.getEsex());            sta.setString(6,employee.getEnum());            sta.setString(7,employee.getEdept());            sta.setString(8,employee.getEduty());            sta.setString(9,employee.getEemail());            sta.setString(10,employee.getEtel());            sta.setString(11,employee.getEip());            res = sta.executeQuery();            return true;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }    @Override    public boolean deleteEmployee(String eid) {        try{            con = DatabaseBean.getConnection();            sql = "{call deleteEmployee(?)}";            sta = con.prepareCall(sql);            sta.setString(1,eid);            res = sta.executeQuery();            if(res.toString().endsWith("1"))                return true;            else                return false;        }catch (SQLException e){            e.printStackTrace();        }finally {            DatabaseBean.close(res,sta,con);        }        return false;    }}